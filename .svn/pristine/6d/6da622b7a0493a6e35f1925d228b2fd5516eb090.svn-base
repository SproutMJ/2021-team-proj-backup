package AlgorithmTest;

import java.util.Hashtable;
import java.util.PriorityQueue;

import AlgorithmTest.Entity.Frequency;
import AlgorithmTest.Entity.MapForCompress;
import AlgorithmTest.function.PreorderTraversal;

public class CompressAlgorithmTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(huffman("01122233345555667777889AAAAAAAAABBCCCCDDFFFFFFF"));
		//huffman("0123456798");
	}

	public static String huffman(String origin) {

		// calculating frequency
		int freq[] = new int[16];

		for (int i = 0; i < origin.length(); i++) {
			if ('0' <= origin.charAt(i) && origin.charAt(i) <= '9') {
				freq[origin.charAt(i) - '0']++;
			} else {
				freq[origin.charAt(i) - 'A' + 10]++;
			}
		}

		// inserting frequency to minheap
		PriorityQueue<Frequency> minHeap = new PriorityQueue<Frequency>((a, b) -> {
			if (a.getFrequency() < b.getFrequency())
				return -1;
			else if (a.getFrequency() == b.getFrequency())
				return 0;
			else
				return 1;
		});

		for (int i = 0; i < freq.length; i++) {
			if (freq[i] != 0) {
				if (0 <= i && i <= 9)
					minHeap.add(new Frequency((char) (i + '0'), freq[i]));
				else
					minHeap.add(new Frequency((char) (i - 10 + 'A'), freq[i]));
			}
		}

		// make a tree
		while (minHeap.size() > 1) {
			Frequency left = minHeap.remove();
			Frequency right = minHeap.remove();
			Frequency parent = new Frequency(left, right);
			minHeap.add(parent);
		}

		// preorder traversal and make a HashMap
		Frequency root = minHeap.remove();
		PreorderTraversal pt = new PreorderTraversal();
		MapForCompress map = pt.preorderTraversal(root, "");
		
		//encoding
		String encode = "";
		for (int i = 0; i < origin.length(); i++) {
			encode+= map.getEncodingMap().get(origin.charAt(i));
		}

		return encode;
	}

}
