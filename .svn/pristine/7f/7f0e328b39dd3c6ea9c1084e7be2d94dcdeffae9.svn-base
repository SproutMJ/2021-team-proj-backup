package service;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.Duration;
import java.time.Instant;

import filestructure.MjFile;
import filestructure.MjFileBody;
import filestructure.MjFileHeader;
import utility.HuffmanCompress;
import utility.HuffmanDecompress;
import utility.HuffmanEntity;

public class CompressionServiceImpl implements CompressionService{

	@Override
	public void compressFile(File file) {
		
		Instant begin = Instant.now();
		
		long fileSize = file.length();
		
		//byte 크기만큼 buffer 선언
		byte[] buffer = new byte[(int)file.length()];
		
		FileInputStream fis;
		BufferedInputStream bis;
		
		try {
			fis = new FileInputStream(file.getAbsoluteFile());
			bis = new BufferedInputStream(fis);
			bis.read(buffer);
			bis.close();
			fis.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
		
		System.out.println("파일 이름 : " + file.getName());
		System.out.println("바이트 크기 : " + fileSize);
		
		HuffmanCompress hc = new HuffmanCompress();
		HuffmanEntity entity = hc.compress(buffer);

		String encodedCode = entity.getEncodedCode();
		
		System.out.println(encodedCode.length() % 8);
		
		byte[] compressedByte = new byte[encodedCode.length()/8];
		int cnt = 0;
		for(int i = 0; i < compressedByte.length; i++) {
			compressedByte[i] = (byte) Integer.parseInt(encodedCode.substring(8*i, 8*i+8), 2);
			cnt++;
			System.out.println(cnt);
		}
		
		String compressedFileName = "새 압축.mj";
		
		MjFileHeader header = new MjFileHeader(compressedFileName, file.getName(), (int) file.length(), (int) compressedByte.length, entity.getLastBinary(), entity.getDecodingMap());
		MjFileBody body = new MjFileBody(compressedByte);
		MjFile mjFile = new MjFile(header, body);
		
		FileOutputStream fos;
		ObjectOutputStream oos;
		
		try {
			fos = new FileOutputStream(compressedFileName); //저장 위치 입력받아야함
			oos = new ObjectOutputStream(fos);
			oos.writeObject(mjFile);
			oos.close();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Instant end = Instant.now();
		System.out.println(Duration.between(begin, end).toSeconds() + "초 걸림");
	}

	@Override
	public void deCompressFile(File file) {
		
		FileInputStream fis;
		ObjectInputStream ois;
		MjFile mjFile = null;
		
		try {
			fis = new FileInputStream(file.getAbsoluteFile());
			ois = new ObjectInputStream(fis);
			mjFile = (MjFile)ois.readObject();
			ois.close();
			fis.close();
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		byte[] encodedBinary = mjFile.getBody().getBinary();
		int originFileSize = mjFile.getHeader().getFileSize();
		StringBuilder builder = new StringBuilder();
		for(int i = 0; i < encodedBinary.length; i++) {
			builder.append(byteToBinaryString(encodedBinary[i]));
		}
		builder.append(mjFile.getHeader().getLastBinary());
		
		String stringBinary = builder.toString();
		HuffmanDecompress hfdc = new HuffmanDecompress();
		byte[] decodedBinary = hfdc.decompress(mjFile.getHeader().getDecodingMap(), stringBinary, originFileSize);
		
		String originName = mjFile.getHeader().getOriginName();
		
		FileOutputStream fos;
		BufferedOutputStream bos;
		
		try {
			fos = new FileOutputStream(originName);
			bos = new BufferedOutputStream(fos);
			bos.write(decodedBinary);
			bos.close();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public String byteToBinaryString(byte n) {
	    StringBuilder sb = new StringBuilder("00000000");
	    for (int bit = 0; bit < 8; bit++) {
	        if (((n >> bit) & 1) > 0) {
	            sb.setCharAt(7 - bit, '1');
	        }
	    }
	    return sb.toString();
	}
}
